{"version":3,"file":"loaders.mjs","sources":["../src/loaders.ts"],"sourcesContent":["import { IResourceMetadata, Loader, LoaderResource } from '@pixi/loaders';\nimport { BaseTexture, IAutoDetectOptions, Resource, Texture } from '@pixi/core';\nimport { ISkeletonParser, TextureAtlas } from '@pixi-spine/base';\nimport { ALPHA_MODES } from '@pixi/constants';\n\nfunction isJson(resource: LoaderResource) {\n    return resource.type === LoaderResource.TYPE.JSON;\n}\n\nfunction isBuffer(resource: LoaderResource) {\n    return resource.xhrType === (LoaderResource as any).XHR_RESPONSE_TYPE.BUFFER;\n}\n\nLoaderResource.setExtensionXhrType('skel', LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n\n/**\n * @public\n */\nexport abstract class AbstractSpineParser {\n    abstract createJsonParser(): ISkeletonParser;\n\n    abstract createBinaryParser(): ISkeletonParser;\n\n    abstract parseData(resource: LoaderResource, parser: ISkeletonParser, atlas: TextureAtlas, dataToParse: any): void;\n\n    genMiddleware() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n\n        return {\n            use(this: Loader, resource: LoaderResource, next: () => any) {\n                // skip if no data, its not json, or it isn't atlas data\n                if (!resource.data) {\n                    return next();\n                }\n\n                const isJsonSpineModel = isJson(resource) && resource.data.bones;\n                const isBinarySpineModel = isBuffer(resource) && (resource.extension === 'skel' || (resource.metadata && (resource.metadata as any).spineMetadata));\n\n                if (!isJsonSpineModel && !isBinarySpineModel) {\n                    return next();\n                }\n\n                let parser: ISkeletonParser = null;\n                let dataToParse = resource.data;\n\n                if (isJsonSpineModel) {\n                    parser = self.createJsonParser();\n                } else {\n                    parser = self.createBinaryParser();\n                    if (resource.data instanceof ArrayBuffer) {\n                        dataToParse = new Uint8Array(resource.data);\n                    }\n                }\n\n                const metadata = (resource.metadata || {}) as IResourceMetadata;\n                const metadataSkeletonScale = metadata ? (metadata as any).spineSkeletonScale : null;\n\n                if (metadataSkeletonScale) {\n                    parser.scale = metadataSkeletonScale;\n                }\n\n                const metadataAtlas = metadata.spineAtlas;\n\n                if (metadataAtlas === false) {\n                    return next();\n                }\n                if (metadataAtlas && metadataAtlas.pages) {\n                    self.parseData(resource, parser, metadataAtlas, dataToParse);\n\n                    return next();\n                }\n\n                const metadataAtlasSuffix = metadata.spineAtlasSuffix || '.atlas';\n\n                /**\n                 * use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files\n                 * that correspond to the spine file are in the same base URL and that the .json and .atlas files\n                 * have the same name\n                 */\n                let atlasPath = resource.url;\n                const queryStringPos = atlasPath.indexOf('?');\n\n                if (queryStringPos > 0) {\n                    // remove querystring\n                    atlasPath = atlasPath.substr(0, queryStringPos);\n                }\n                atlasPath = atlasPath.substr(0, atlasPath.lastIndexOf('.')) + metadataAtlasSuffix;\n                // use atlas path as a params. (no need to use same atlas file name with json file name)\n                if (metadata.spineAtlasFile) {\n                    atlasPath = metadata.spineAtlasFile;\n                }\n\n                // remove the baseUrl\n                atlasPath = atlasPath.replace(this.baseUrl, '');\n\n                const atlasOptions = {\n                    crossOrigin: resource.crossOrigin,\n                    xhrType: LoaderResource.XHR_RESPONSE_TYPE.TEXT,\n                    metadata: metadata.spineMetadata || null,\n                    parentResource: resource,\n                };\n                const imageOptions = {\n                    crossOrigin: resource.crossOrigin,\n                    metadata: metadata.imageMetadata || null,\n                    parentResource: resource,\n                };\n                let baseUrl = resource.url.substr(0, resource.url.lastIndexOf('/') + 1);\n                // remove the baseUrl\n\n                baseUrl = baseUrl.replace(this.baseUrl, '');\n\n                const namePrefix = metadata.imageNamePrefix || `${resource.name}_atlas_page_`;\n\n                let adapter: (line: string, callback: (baseTexture: BaseTexture<Resource, IAutoDetectOptions>) => any) => void;\n\n                if (metadata.images) adapter = staticImageLoader(metadata.images);\n                else if (metadata.image) adapter = staticImageLoader({ default: metadata.image });\n                else if (metadata.imageLoader) adapter = metadata.imageLoader(this, namePrefix, baseUrl, imageOptions);\n                else adapter = imageLoaderAdapter(this, namePrefix, baseUrl, imageOptions);\n\n                const createSkeletonWithRawAtlas = (rawData: string) => {\n                    // eslint-disable-next-line no-new\n                    new TextureAtlas(rawData, adapter, (spineAtlas) => {\n                        if (spineAtlas) {\n                            self.parseData(resource, parser, spineAtlas, dataToParse);\n                        }\n                        next();\n                    });\n                };\n\n                if (metadata.atlasRawData) {\n                    createSkeletonWithRawAtlas(metadata.atlasRawData);\n                } else {\n                    this.add(`${resource.name}_atlas`, atlasPath, atlasOptions, (atlasResource: any) => {\n                        if (!atlasResource.error) {\n                            createSkeletonWithRawAtlas(atlasResource.data);\n                        } else {\n                            next();\n                        }\n                    });\n                }\n            },\n        };\n    }\n}\n\n/**\n * @public\n */\nexport function imageLoaderAdapter(loader: any, namePrefix: any, baseUrl: any, imageOptions: any) {\n    if (baseUrl && baseUrl.lastIndexOf('/') !== baseUrl.length - 1) {\n        baseUrl += '/';\n    }\n\n    return (line: string, callback: (baseTexture: BaseTexture) => any) => {\n        const name = namePrefix + line;\n        const url = baseUrl + line;\n\n        const cachedResource = loader.resources[name];\n\n        if (cachedResource) {\n            const done = () => {\n                callback(cachedResource.texture.baseTexture);\n            };\n\n            if (cachedResource.texture) {\n                done();\n            } else {\n                cachedResource.onAfterMiddleware.add(done);\n            }\n        } else {\n            loader.add(name, url, imageOptions, (resource: LoaderResource) => {\n                if (!resource.error) {\n                    if (line.indexOf('-pma.') >= 0) {\n                        resource.texture.baseTexture.alphaMode = ALPHA_MODES.PMA;\n                    }\n\n                    callback(resource.texture.baseTexture);\n                } else {\n                    callback(null);\n                }\n            });\n        }\n    };\n}\n\n/**\n * @public\n */\nexport function syncImageLoaderAdapter(baseUrl: any, crossOrigin: any) {\n    if (baseUrl && baseUrl.lastIndexOf('/') !== baseUrl.length - 1) {\n        baseUrl += '/';\n    }\n\n    return (line: any, callback: any) => {\n        callback(BaseTexture.from(line, crossOrigin));\n    };\n}\n\n/**\n * @public\n */\nexport function staticImageLoader(pages: { [key: string]: BaseTexture | Texture }) {\n    return (line: any, callback: any) => {\n        const page = pages[line] || (pages.default as any);\n\n        if (page && page.baseTexture) callback(page.baseTexture);\n        else callback(page);\n    };\n}\n"],"names":[],"mappings":"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"}